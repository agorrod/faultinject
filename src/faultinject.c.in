#include "config.h"

#undef _FILE_OFFSET_BITS
#undef __USE_FILE_OFFSET64
#undef _GNU_SOURCE
#define _GNU_SOURCE
#include <dirent.h>
#include <dlfcn.h>
#include <errno.h>
#include <execinfo.h>
#include <fcntl.h>

/* Need to tell libunwind to provide local only functionality */
#define UNW_LOCAL_ONLY
#include <libunwind.h>

#include <pthread.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>

#define	FAULT_INJECT_API	__attribute__ ((visibility("default")))

/*
 * Save references to the C library implementations of the functions we are
 * overriding.
 */
@TYPEDEFS@

@FUNCTION_DECLARATIONS@

static char *g_library_trace_substring = NULL;
static char *g_library_trace_tmpdir = NULL;

static uint64_t g_op_count = 0;
static uint64_t g_max_op_count = 0;
static pid_t g_trace_pid = 0;

static char g_backtrace_info[20][256];
/*
 * points to the index where last valid backtrace function with valid tracing
 * substring is identified
 */
static int g_backtrace_counter;

static void dump_backtrace(void);

@GLOBAL_CONFIG_DECLARATIONS@

void __attribute__ ((constructor)) faultinject_constructor(void);

/*
 * Setup pointers to the C library version of functions we are overriding,
 * and initialize any global variables.
 */
void __attribute__ ((constructor)) faultinject_constructor(void)
{
	char *env_string, *err_string;

	env_string = err_string = NULL;
	errno = 0;

	fprintf(stderr, "Setting up fault injector\n");
@CONSTRUCTOR_ASSIGNMENTS@

	if ((env_string = getenv("FAULTINJECT_LIBRARY_NAME")) != NULL &&
	    strlen(env_string) != 0) {
		g_library_trace_substring = env_string;
	}
	if ((env_string = getenv("FAULTINJECT_TMP_DIR")) != NULL &&
	    strlen(env_string) != 0) {
		g_library_trace_tmpdir = env_string; }
	if ((env_string = getenv("FAULTINJECT_FAIL_COUNT")) != NULL &&
	    strlen(env_string) != 0) {
		errno = 0;
		g_max_op_count = strtoull(env_string, NULL, 10);
		printf("Set max op count to: %d\n", (int)g_max_op_count);
		if (errno != 0) {
			fprintf(stderr, "Failed to parse environment variable\n");
			g_max_op_count = 0;
		}
	}
	g_trace_pid = getpid();
	/* Function specific environment variable configuration parsing. */
@CONSTRUCTOR_CONFIG@
}

static int faultinject_fail_operation(void)
{
	if (!libc_open)
		faultinject_constructor();

	if (g_max_op_count > 0 && ++g_op_count > g_max_op_count) {
		printf("failing with op count: %d\n", (int)g_op_count);
		dump_backtrace();
		return (EFAULT);
	}

@OPERATION_CHECK@

	return (0);
}

#ifdef HAVE_TRACE
/* We may want to make this conditional at runtime. */
static int faultinject_trace_operation(void)
{
	return (1);
}
#endif

static void dump_backtrace(void)
{
	int i;
	char tmp_file[256];
	FILE *log_fd;

	/* Log the backtrace */
	(void)snprintf(tmp_file, 256, "%s/fi_pid_%d_inject_bt.log",
	    g_library_trace_tmpdir, g_trace_pid);
	log_fd = (*libc_fopen)(tmp_file, "a");
        if (log_fd != NULL) {
		fprintf(log_fd, "Induced fault in following backtrace:\n");
		for(i = 0; i < g_backtrace_counter; i++)
			fprintf(log_fd, "%s\n", g_backtrace_info[i]);
		fprintf(log_fd, "\n");
		(*libc_fclose)(log_fd);
	}
}

static int faultinject_caller_interesting(void)
{
	unw_cursor_t cursor;
	unw_context_t uc;
	unw_word_t offp;
	int i, ret;

	/* Avoid fall-injecting recursively inside this particular function */
	static int in_fi_func = 0;
	if (in_fi_func == 1)
		return (0);
	in_fi_func = 1;

	ret = 0;
	if (g_library_trace_substring == NULL) {
		ret = 1;
		goto end;
	}

	if (0 != unw_getcontext(&uc))
		goto end;

	if (0 != unw_init_local(&cursor, &uc))
		goto end;

	/*
	 * Get stack trace upto 20 callers deep, we will dump this backtrace
	 * when needed. Scan through this backtrace looking for a match to the
	 * library we want to induce fault in
	 */
	g_backtrace_counter = 0;
	while (unw_step(&cursor) > 0 && g_backtrace_counter < 20) {
		g_backtrace_info[g_backtrace_counter][0] = '\0';
		if (0 != unw_get_proc_name(&cursor,
		    g_backtrace_info[g_backtrace_counter], 256, &offp) ||
		    0 == strlen(g_backtrace_info[g_backtrace_counter]))
		       break;
		g_backtrace_counter++;
	}
	for (i = 0; i < g_backtrace_counter; i++) {
		if (strstr(g_backtrace_info[i],
		    g_library_trace_substring) != NULL) {
				ret = 1;
				break;
			}
	}

end:
	in_fi_func = 0;
	return (ret);
}

@FUNCTION_DEFINITIONS@
